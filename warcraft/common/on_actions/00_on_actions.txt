# Any on-action can be <on_action>_<tag>, meaning it will only affect that specific tag.

on_actions = {
    #Not run on a specific country.
	on_startup = {
		effect = {
			every_country = {
                setup_variables = yes
            }
            every_country = {
                limit = { is_ai = no }
                set_rule = {
                    can_create_factions = yes
                }
            }
            random_country = {
                set_country_flag = processor
            }
            if = {
                limit = {
                    has_dlc = "La Resistance"
                }
                every_country = {
                    capital_scope = {
                        set_variable = { historical_capital_for_country = PREV }
                    }
                }
            }
		}
	}
    
    # country 
    on_daily = {
        
    }
    
    # country 
    on_weekly = {
    
    }
    
	# country 
	on_new_term_election = {
		random_events = {

		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {

		}
	}

	# country, FROM = ace, PREV = enemy ace 
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {

		}
	}
	
	# country, FROM = our ace, 
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {

		}
	}

	# country, FROM = our ace, 
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {

		}
	}

	# country, FROM = ace
	on_ace_killed = {
		random_events = {
		}
	}

	# During justifying wargoals
	# triggered daily, so make sure there is a sink somewhere not firing events
	# country, FROM = target nation
	on_justifying_wargoal_pulse = {
		random_events = {
            
		}
	}

	on_wargoal_expire = {
		random_events = {

		}
	}

	on_nuke_drop = {

		effect = {

		}
		random_events = {

		}
	}

	on_border_war_lost = {
		effect = {

		}
	}
	
    # ROOT is the new faction leader FROM is the old faction leader
	on_assume_faction_leadership = {
		effect = {
        
        }
    }
    
	on_leave_faction = {
		effect = {
			FROM = {
				add_opinion_modifier = {
					modifier = faction_traitor
					target = ROOT
					days = 365
				}
			
				add_opinion_modifier = {
					modifier = faction_traitor_trade
					target = ROOT
					days = 365
				}
			}
		}
	}

	#FROM is the one that joins the faction
	on_create_faction = {
		effect = {

		}
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {
			
		}
	}

	#FROM is faction leader on join faction requests.
	on_join_faction = {
		effect = {

		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {

		}
	}
	
	# When a new faction is formed
	on_faction_formed = {
		effect = {
			
		}
	}
	
	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {

		}
	}

	# ROOT is previously capitualted country
	on_uncapitulation = {
		effect = {

		}
	}

	on_government_change = {
		effect = {			
			
		}
	}

	on_coup_succeeded = {
		effect = {
			
		}
	}

	#ROOT is winner #FROM gets annexed - This will also fire on_annex
	on_civil_war_end = {
		effect = {

		}
	}

    #ROOT is winner #FROM gets annexed - This fires just before FROM gets annexed, meaning the country and everything it owns still exists. It will also fire on_annex and on_civil_war_end
	on_civil_war_end_before_annexation = {
		effect = {
			
		}
	}
    
	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
			
		}
	}

	on_unit_leader_created = {
		effect = {
			if = {
				limit = { is_exiled_leader = yes }
				From.From = { save_event_target_as = exile_nation }
				add_unit_leader_trait = exiled_leader
				
				# add_random_trait = {
					# old_guard
					# brilliant_strategist
					# inflexible_strategist
					# war_hero
					# trait_cautious
					# trait_reckless
					# media_personality
					# harsh_leader
					# infantry_officer
					# cavalry_officer
					# armor_officer
				# }

				# add_random_trait = {
					# organizer
					# panzer_leader
					# cavalry_leader
					# trait_engineer
					# infantry_leader
					# naval_invader						
					# commando
					# skilled_staffer
					# trickster					
				# }

				# unit_leader_event = { id = mtg_exile_leader_added.1 }
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {

		}
	}
    
    #ROOT is winner #FROM is loser
    on_peaceconference_ended = {
		effect = {
        }
    }
    
    #ROOT is subject FROM is previous overlord
	on_subject_free = {
		effect = {

		}
	}
    
    #ROOT is subject FROM is overlord
	on_subject_autonomy_level_change = {
		effect = {

		}
	}

	#ROOT is subject FROM is overlord
	on_subject_annexed = {

	}
    
    #used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	on_puppet = {
		effect = {
			
		}
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	on_release_as_puppet = {
		effect = {
			
		}
	}

	#ROOT is free nation FROM is releaser
	on_release_as_free = {
		effect = {

		}
	}
    
    # on_bi_yearly_pulse
    # on_five_year_pulse
    
    #Root is exile
	#From is new host
	#FromFrom is old host
	on_host_changed_from_capitulation = {
		effect = {
			#Transfer exile leaders to new host
			From.From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root.From
				}
			}
		}
	}
    
    #Root is exile
	#From is old host
	on_exile_government_reinstated = {
		effect = {
			From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root
				}
			}
			Root = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					remove_unit_leader_trait = exiled_leader
					remove_exile_tag = yes
				}
			}
		}
	}
    
    on_government_exiled = {
		effect = {
			
		}
	}
    
    # FROM is the sinker, ROOT is the owner of the ship being sunk
	on_pride_of_the_fleet_sunk = {
		effect = {
			
		}
	}
    
    on_ruling_party_change = {
    
    }
    
    #-----------------------------------------------
    # Espionage
    #-----------------------------------------------
    # called when an operative performing an offensive mission in a country
	# has been spotted
	on_operative_on_mission_spotted = {

		effect = {
            # SCOPE  the operative
            # ROOT   the country the operative was performing its mission in
            # FROM   the country the operative is operating for

			# base values
            set_temp_variable = {
                var = capture_chance
                value = 90
            }
            set_temp_variable = {
                var = kill_chance
                value = 10
            }			

            # nullify kill chance for some missions
            if = {
                limit = {
                    OR = {
                        operative_leader_mission = control_trade
                        operative_leader_mission = diplomatic_pressure
                    }
                }
                set_temp_variable = {
                    var = kill_chance
                    value = 0
                }
            }

            # Capture chance modifier unused as it would just increased or decrease death chance
            #multiply_temp_variable = {
            #   var = capture_chance
            #   value = own_capture_chance_factor # the operative's capture chance modifiers
            #}
            #clamp_temp_variable = {
            #   var = capture_chance
            #   min = 0
            #   max = 100
            #}

            random_list = {
                #log = yes # log picked effect in game.log

                temp_var:capture_chance = {
                   	capture_operative = {
                   	    captured_by = ROOT
                   	}  	
                }
                temp_var:kill_chance = {
                    kill_operative = {
                        killed_by = ROOT
                    }
                }

            }

        }
        
    }
    
    on_operative_captured = {
		effect = {
			# SCOPE  the operative
			# ROOT   the country the operative was performing its mission in
			# FROM   the country the operative is operating for
			operative_leader_event = {
                id = lar_operative_event.6
                recipient = ROOT
                originator = ROOT
                set_from_from = ROOT
                set_from = FROM
                days = 1
			}
			if = {
				limit = {
					NOT = { has_unit_leader_flag = le_clerc1 }
				}
				set_unit_leader_flag = le_clerc1
			}
			else_if = {
				limit = {
					has_unit_leader_flag = le_clerc1
				}
				set_unit_leader_flag = le_clerc2
			}
			random_list = {
				log = yes
				90 = { #regular
					operative_leader_event = {
						id = lar_operative_event.1
						set_from_from = ROOT
					}
				}
				10 = { #operative turned
					modifier = {
						has_trait = operative_tough
						factor = 0 #tough operatives never get turned
					}
					modifier = {
						has_trait = operative_double_agent
						factor = 0 #no tripple agents please
					}
					turn_operative = { turned_by = ROOT }
					# ensure the operative has the nationality of the country he is coming from
					add_nationality = FROM
					operative_leader_event = {
            	    	id = lar_operative_event.5
						set_from_from = FROM #tells the event which nationality to add
            		}
            	}
			}
		}
	}
    
    on_operative_death = {
		effect = {
			# SCOPE  the operative
			# ROOT   the killer country (optional)
			# FROM   the country the operative is operating for
			if = {
				limit = {
					country_exists = ROOT
				}

				# operative killed by a country, likelly while on mission
				operative_leader_event = {
					id = lar_operative_event.3
					set_from_from = ROOT
				}
			}
			else = {
				# other cause of death
			}
			
			if = {
				limit = {
					FROM = {
						NOT = { is_ai = yes }
						has_done_agency_upgrade = upgrade_suicide_pills
					}
				}
				set_global_flag = kill_me_alive_flag
			}
		}
	}
    
    on_operative_detected_during_operation = {
		effect = {
			random_list = {
				45 = {
					force_operative_leader_into_hiding = 45
					operative_leader_event = {
						id = lar_operative_event.2
						set_from_from = FROM
					}
				}
				25 = {
					capture_operative = {
						captured_by = FROM
					}
				}
				25 = {
					harm_operative_leader = 90
					operative_leader_event = {
						id = lar_operative_event.4
						set_from_from = FROM
					}
				}
				5 = {
					kill_operative = {
						killed_by = FROM
					}
				}
			}
		}
	}
    
    on_operation_completed = {
		effect = {
			# same scope setup as in operation outcome:
			# THIS: the operation
			# ROOT: the initiating country
			# FROM: the target country
			#log = "This: [This.GetName] From: [From.GetName] Root: [Root.GetName]"
			
			if = {
				limit = {
					ROOT = { has_country_flag = just_freed_operative_flag }
				}
				every_operative = {
					if = {
						limit = {
							NOT = { has_trait = operative_escape_artist }
						}
						random_list = {
							15 = { add_unit_leader_trait = operative_escape_artist }
							85 = {}
						}
					}
				}
				ROOT = { clr_country_flag = just_freed_operative_flag }
			}
			every_operative = { #add target nationality if linguist
				if = {
					limit = {
						has_trait = operative_linguist
						NOT = { operative_leader_mission = no_mission }
						NOT = { has_nationality = FROM }
					}
					random_list = {
						20 = { add_nationality = FROM }
						80 = {}
					}
				}
			}
		}
	}
    
    # called a country fully decrypts cipher of a target country
	# scope is the target country that its cipher is decrypted
	# from scope is the decrypter country
	on_fully_decrypted_cipher = {

	}

	# called when a country activates its active cipher bonuses against a target
	# scope is the target country
	# from scope is the country that activates its bonuses
	on_activated_active_decryption_bonuses = {

	}
    
    # scope is operative
	# from scope is the country 
	#on_operative_recruited = {
	#	effect = {
	#	
	#	}
	#}
	
	# scope is operative
	# from scope is the country 
	#on_operative_created = {
	#	effect = {
	#	
	#	}
	#}
}
